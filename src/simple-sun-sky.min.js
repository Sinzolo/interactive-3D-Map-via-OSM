AFRAME.registerShader("simpleSunSky",{schema:{sunPosition:{type:"vec3",default:{x:1,y:1,z:1}},lightColor:{type:"color",default:"#87cefa"},darkColor:{type:"color",default:"#126aab"},fogColor:{type:"color",default:"#4c9cd2"},sunColor:{type:"color",default:"#fff7ee"},log:{type:"boolean",default:!1}},vertexShader:"\nprecision mediump float;\n\nvarying vec3 vnorm;\n\nvoid main() {\n    vnorm = normal;\n       \n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"\nprecision mediump float;\n\nconst float PI = 3.1415926535897932384626433832795;\n\nuniform vec3 sunNormal;\nuniform vec3 lightColor;\nuniform vec3 darkColor;\nuniform vec3 sunColor;\n\nvarying vec3 vnorm;\n\n\nvoid main() {\n    vec3 norm = normalize(vnorm);\n    // ranges from 0 when normal & sunNormal are aligned to 1 when opposite\n    float interp = acos(dot(norm, sunNormal)) / PI;\n\n    vec3 color = mix(lightColor, darkColor, interp);\n    color = mix(sunColor, color, min((interp-0.015)*75.0, 1.0));\n    gl_FragColor = vec4(color, 1.0);\n}",
fragmentShaderWithFog:"\nprecision mediump float;\n\nconst float PI = 3.1415926535897932384626433832795;\n\nuniform vec3 sunNormal;\nuniform vec3 lightColor;\nuniform vec3 darkColor;\nuniform vec3 fogColor;\nuniform vec3 sunColor;\n\nvarying vec3 vnorm;\n\n\nvoid main() {\n    vec3 norm = normalize(vnorm);\n    // ranges from 0 when normal & sunNormal are aligned to 1 when opposite\n    float interp = acos(dot(norm, sunNormal)) / PI;\n\n    vec3 color = mix(lightColor, darkColor, interp);\n    \n    color = mix(sunColor, color, smoothstep(0.009, 0.012, interp));\n\n    color = mix(fogColor, color, smoothstep(0.0, 0.3, norm.y));\n\n    gl_FragColor = vec4(color, 1.0);\n}",
init:function(a){let b=new THREE.Vector3(a.sunPosition.x,a.sunPosition.y,a.sunPosition.z);"NONE"===a.fogColor.toUpperCase()?(a.log&&console.log("sunPos:",b,"   lightColor:",new THREE.Color(a.lightColor),"   darkColor:",new THREE.Color(a.darkColor)),this.material=new THREE.ShaderMaterial({uniforms:{lightColor:{value:new THREE.Color(a.lightColor)},darkColor:{value:new THREE.Color(a.darkColor)},sunNormal:{value:b.normalize()},sunColor:{value:new THREE.Color(a.sunColor)}},vertexShader:this.vertexShader,
fragmentShader:this.fragmentShader})):(a.log&&console.log("sunPos:",b,"   lightColor:",new THREE.Color(a.lightColor),"   darkColor:",new THREE.Color(a.darkColor),"   fogColor:",new THREE.Color(a.fogColor)),this.material=new THREE.ShaderMaterial({uniforms:{lightColor:{value:new THREE.Color(a.lightColor)},darkColor:{value:new THREE.Color(a.darkColor)},sunNormal:{value:b.normalize()},sunColor:{value:new THREE.Color(a.sunColor)},fogColor:{value:new THREE.Color(a.fogColor)}},vertexShader:this.vertexShader,
fragmentShader:this.fragmentShaderWithFog}))},update:function(a){let b=new THREE.Vector3(a.sunPosition.x,a.sunPosition.y,a.sunPosition.z);this.material.uniforms.sunNormal.value=b.normalize();this.material.uniforms.lightColor.value.set(a.lightColor);this.material.uniforms.darkColor.value.set(a.darkColor);this.material.uniforms.sunColor.value.set(a.sunColor);this.material.uniforms.fogColor&&this.material.uniforms.fogColor.value.set(a.fogColor)}});
AFRAME.registerPrimitive("a-simple-sun-sky",{defaultComponents:{geometry:{primitive:"sphere",radius:5E3,segmentsWidth:64,segmentsHeight:20},material:{shader:"simpleSunSky",side:"back"}},mappings:{"sun-position":"material.sunPosition","light-color":"material.lightColor","dark-color":"material.darkColor","sun-color":"material.sunColor","fog-color":"material.fogColor",log:"material.log",radius:"geometry.radius"}});
